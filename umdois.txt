============================================================
GOLD Parser Builder
Version 5.2.0.
============================================================


========================================
Terminals
========================================

 0      (EOF)
 1      (Error)
 2      Whitespace
 3      '('
 4      ')'
 5      '*'
 6      '+'
 7      const
 8      id


========================================
Nonterminals
========================================

9       <E>
10      <F>
11      <T>


========================================
Rules
========================================

0       <E> ::= <E> '+' <T>
1       <E> ::= <T>
2       <T> ::= <T> '*' <F>
3       <T> ::= <F>
4       <F> ::= '(' <E> ')'
5       <F> ::= id
6       <F> ::= const


========================================
DFA States
========================================

State 0
        Goto 1       &09 .. &0D, &20, &85, &A0, &1680, &180E, &2000 .. &200A, &2026, &2028, &2029, &202F, &205F, &3000
        Goto 2       (
        Goto 3       )
        Goto 4       *
        Goto 5       +
        Goto 6       0123456789
        Goto 7       AEIOUaeiou


State 1
        Goto 1       &09 .. &0D, &20, &85, &A0, &1680, &180E, &2000 .. &200A, &2026, &2028, &2029, &202F, &205F, &3000
        Accept Whitespace


State 2
        Accept '('


State 3
        Accept ')'


State 4
        Accept '*'


State 5
        Accept '+'


State 6
        Goto 6       0123456789
        Accept const


State 7
        Goto 7       AEIOUaeiou
        Accept id




========================================
LALR States
========================================

State 0
        <S'> ::= _ <E> (EOF)         <S'> ::= ^ <E> (EOF)
        <E> ::= _ <E> '+' <T>        <E> ::= ^ <E> '+' <T>
        <E> ::= _ <T>                <E> ::= ^ <T>
        <T> ::= _ <T> '*' <F>        <T> ::= ^ <T> '*' <F>
        <T> ::= _ <F>                <T> ::= ^ <F>
        <F> ::= _ '(' <E> ')'        <F> ::= ^ '(' <E> ')'
        <F> ::= _ id                 <F> ::= ^ id
        <F> ::= _ const              <F> ::= ^ const

        '(' s 1
        const s 2
        id s 3
        <E> g 4
        <F> g 5
        <T> g 6


State 1
        Prior States: 0, 1, 8, 9

        <F> ::= '(' _ <E> ')'        <F> ::= '(' ^ <E> ')'
        <E> ::= _ <E> '+' <T>        <E> ::= ^ <E> '+' <T>
        <E> ::= _ <T>                <E> ::= ^ <T>
        <T> ::= _ <T> '*' <F>        <T> ::= ^ <T> '*' <F>
        <T> ::= _ <F>                <T> ::= ^ <F>
        <F> ::= _ '(' <E> ')'        <F> ::= ^ '(' <E> ')'
        <F> ::= _ id                 <F> ::= ^ id
        <F> ::= _ const              <F> ::= ^ const

        '(' s 1
        const s 2
        id s 3
        <E> g 7
        <F> g 5
        <T> g 6


State 2
        Prior States: 0, 1, 8, 9

        <F> ::= const _              <F> ::= const ^

        (EOF) r 6
        ')' r 6
        '*' r 6
        '+' r 6


State 3
        Prior States: 0, 1, 8, 9

        <F> ::= id _                 <F> ::= id ^

        (EOF) r 5
        ')' r 5
        '*' r 5
        '+' r 5


State 4
        Prior States: 0

        <S'> ::= <E> _ (EOF)         <S'> ::= <E> ^ (EOF)
        <E> ::= <E> _ '+' <T>        <E> ::= <E> ^ '+' <T>

        (EOF) a
        '+' s 8


State 5
        Prior States: 0, 1, 8

        <T> ::= <F> _                <T> ::= <F> ^

        (EOF) r 3
        ')' r 3
        '*' r 3
        '+' r 3


State 6
        Prior States: 0, 1

        <E> ::= <T> _                <E> ::= <T> ^
        <T> ::= <T> _ '*' <F>        <T> ::= <T> ^ '*' <F>

        '*' s 9
        (EOF) r 1
        ')' r 1
        '+' r 1


State 7
        Prior States: 1

        <F> ::= '(' <E> _ ')'        <F> ::= '(' <E> ^ ')'
        <E> ::= <E> _ '+' <T>        <E> ::= <E> ^ '+' <T>

        ')' s 10
        '+' s 8


State 8
        Prior States: 4, 7

        <E> ::= <E> '+' _ <T>        <E> ::= <E> '+' ^ <T>
        <T> ::= _ <T> '*' <F>        <T> ::= ^ <T> '*' <F>
        <T> ::= _ <F>                <T> ::= ^ <F>
        <F> ::= _ '(' <E> ')'        <F> ::= ^ '(' <E> ')'
        <F> ::= _ id                 <F> ::= ^ id
        <F> ::= _ const              <F> ::= ^ const

        '(' s 1
        const s 2
        id s 3
        <F> g 5
        <T> g 11


State 9
        Prior States: 6, 11

        <T> ::= <T> '*' _ <F>        <T> ::= <T> '*' ^ <F>
        <F> ::= _ '(' <E> ')'        <F> ::= ^ '(' <E> ')'
        <F> ::= _ id                 <F> ::= ^ id
        <F> ::= _ const              <F> ::= ^ const

        '(' s 1
        const s 2
        id s 3
        <F> g 12


State 10
        Prior States: 7

        <F> ::= '(' <E> ')' _        <F> ::= '(' <E> ')' ^

        (EOF) r 4
        ')' r 4
        '*' r 4
        '+' r 4


State 11
        Prior States: 8

        <E> ::= <E> '+' <T> _        <E> ::= <E> '+' <T> ^
        <T> ::= <T> _ '*' <F>        <T> ::= <T> ^ '*' <F>

        '*' s 9
        (EOF) r 0
        ')' r 0
        '+' r 0


State 12
        Prior States: 9

        <T> ::= <T> '*' <F> _        <T> ::= <T> '*' <F> ^

        (EOF) r 2
        ')' r 2
        '*' r 2
        '+' r 2




========================================
System Log
========================================

Grammar        Success           The grammar was successfully analyzed
LALR States    Success           LALR Table was succesfully created
DFA States     Success           The DFA State Table was successfully created
System         Success           The grammar was successfully analyzed and tables were created.


