<S> ::= 'begin' <op> 'end'
<op>  ::= <putvar><A> | <attr>
<attr> ::= <var> '='<oper>
<A> ::= <condicao> | <laco>
<condicao> ::= 'if' <cnd> 'then' <op><sen>
<sen> ::= 'else' <op> |
<putvar> ::= <var>'='<oper> |       
<var> ::= 'a' <var> |'e' <var> | 'i' <var> | 'o' <var> | 'u' <var> | 'a' | 'e' | 'i' | 'o' | 'u'
<oper> ::= <var><B1> | <num><B1> | '(' <oper> ')'
<B1> ::= <B><B1> | 
<B> ::= '+' <oper> | '-' <oper> | '*' <oper> | '/' <oper>
<cnd> ::= <opl><C>
<C> ::= <operador><opl>|
<operador> ::= '<' | '>' | '=='
<opl> ::=   <oper>| 'true' | 'false'
<laco> ::= 'while' <cnd> <op> <oplaco>
<num> ::= '1'<num> | '2' <num> | '3' <num> | '4' <num> | '5' <num> | '6' <num> | '7' <num> | '8' <num> | '9' <num> | '0' <num> | '0' | '1' | '2' | '3' |'4' | '5' |'6' | '7' | '8' | '9'
<oplaco> ::= 'continue' | 'break'| 



<S> ::= 'begin' <op> 'end'
<op>  ::= <attr><E> | 'if' <cnd> 'then' <op><B> | 'while' <cnd> <op> <C>
<A> ::= <condicao> | <laco>
<B> ::= <sen> |
<C> ::= <oplaco> |
<E> ::= <A> | <oper> 
<attr> ::= <var> '='<oper>
<condicao> ::= 'if' <cnd> 'then' <op><B>
<sen> ::= 'else' <op>         
<var> ::= id
<oper> ::= '('<oper>')'<D1> | id <D1> | const <D1>
<D1> ::= <D><D1>|
<D> ::= '+' <oper> | '-' <oper> | '*' <oper> | '/' <oper>
<cnd> ::= <opl> <operador> <opl> | 'true' | 'false' | <oper><D>  | '('<oper>')' | id | const
<operador> ::= '<' | '>' | '=='
<opl> ::=  'true' | 'false' | <oper> <D>| '('<oper>')' | id | const
<laco> ::= 'while' <cnd> <op> <C>
<num> ::= const
<oplaco> ::= 'continue' | 'break'  

i0 = { s::= .begin <op> end}
i1 = { s::= begin. <op> end, <op> ::= .<attr><E>, <op> ::= .if <cnd> then <op><B>, <op> ::= .while <cnd> <op> <C>, <attr> =:: .<Vvar>=<oper>, var=::.id}
i2 = { S::= begin <op> .end }
i3 = { <op> ::= <attr>.<E>, <e>::=.<a>,<e>::=.<oper>,<a>::= .<condicao>, <a>::=.<laco>, <oper>::=.(<oper>)<d1>, <oper>::=.id<d1>,<oper>::=.const<D1>,
			    <condicao>::=.'if' <cnd> 'then' <op><B>, <laco>::=.'while' <cnd> <op> <C>}
i4 = { op ::= if .<cnd> then <op><b>, <cnd::= .<opl><operador><opl> , <cnd>::=.true,<cnd>::=.false,<cnd>::=.<oper><D>,<cnd>::=.(<oper>),<cnd>::=.id,<cnd>::=.const,
			  <opl>::=.true,<opl>::=.false,<opl>::=.<oper><D>,<opl>::=.(<oper>), <opl>::= .id, <opl>::= .const,<oper>::=.(<oper>)<d1>, <oper>::=.id<d1>,<oper>::=.const<D1>
 
i5 = { <op> ::= while. <cnd> <op> <C>,<cnd::= .<opl><operador><opl> , <cnd>::=.true,<cnd>::=.false,<cnd>::=.<oper><D>,<cnd>::=.(<oper>),<cnd>::=.id,<cnd>::=.const,
			    <opl>::=.true,<opl>::=.false,<opl>::=.<oper><D>,<opl>::=.(<oper>), <opl>::= .id, <opl>::= .const,<oper>::=.(<oper>)<d1>, <oper>::=.id<d1>,<oper>::=.const<D1>}
i6 = { <attr> ::= <var>.=<oper>}
i7_c = { <var> ::= id.}
i8_c = { S::= begin <op> end.}
i9_c = { <op> ::= <attr><E>.}
i10_c = {<e>::=<a>.}
i11_c = { <e>::=<oper>.}
i12_c = {<a>::= <condicao>.}
i13_c = {<a>::=<laco>.}
i14 = {	<oper>::=(.<oper>)<d1>,<oper>::=.(<oper>)<d1>, <oper>::=.id<d1>,<oper>::=.const<D1>}
i15_c = {<oper>::=id.<d1>, <d1>::=.<D><d1>, <d1>::=.,<d>::=.'+' <oper> | <d>::=.'-' <oper> | <d>::=.'*' <oper> | <d>::=.'/' <oper>}
i16_c = {<oper>::=const.<D1>, <d1>::=.<D><d1>, <d1>::=.,<d>::=.'+' <oper> | <d>::=.'-' <oper> | <d>::=.'*' <oper> | <d>::=.'/' <oper>}

i17 = {op ::= if <cnd>. then <op><b>}
i18 = {<cnd>::= <opl>.<operador><opl>}
i19_c = {<cnd>::=true.,<opl>::=true.}
i20_c = {<cnd>::=false.,<opl>::=false.}
i21 = {<cnd>::=<oper>.<D>,<opl>::=<oper>.<D>, <d>::=.'+' <oper> | <d>::=.'-' <oper> | <d>::=.'*' <oper> | <d>::=.'/' <oper>}
i22 = {<cnd>::=(.<oper>),<opl>::=(.<oper>),<oper>::=(.<oper>)<d1>,<oper>::=.(<oper>)<d1>, <oper>::=.id<d1>,<oper>::=.const<D1>}
i23_c = {<cnd>::id., <opl>::=id., }
i24_c = {<cnd>::=const.,<opl>::=const.},<d>::=.'+' <oper> | <d>::=.'-' <oper> | <d>::=.'*' <oper> | <d>::=.'/' <oper>}
i25 = {<op> ::= while <cnd>. <op><C>, <op> ::= .<attr><E>, <op> ::= .if <cnd> then <op><B>, <op> ::= .while <cnd> <op> <C>, <attr> =:: .<Vvar>=<oper>, var=::.id}
i26 = {<attr> ::= <var>=.<oper>,<oper>::=.(<oper>)<d1>, <oper>::=.id<d1>,<oper>::=.const<D1>}
i27 = {<oper>::=(<oper>.)<d1>}
i28_c = {<oper>::=id<d1>.}
i28_c = { <d1>::=<D>.<d1>,<d1>::=.<D><d1>, <d1>::=.}
i29_c = { <d>::= +.<oper>,<oper>::=.(<oper>)<d1>, <oper>::=.id<d1>,<oper>::=.const<D1>}
i30  =  { <d>::= -.<oper>,<oper>::=.(<oper>)<d1>, <oper>::=.id<d1>,<oper>::=.const<D1>}
i31 =   { <d>::= *.<oper>,<oper>::=.(<oper>)<d1>, <oper>::=.id<d1>,<oper>::=.const<D1>}
i32 =   { <d>::= /.<oper>,<oper>::=.(<oper>)<d1>, <oper>::=.id<d1>,<oper>::=.const<D1>}
i33_c =   {<oper>::=const<D1>.}
i34 = { <op>::= if <cnd>then.<op><b>,<op> ::= .<attr><E>, <op> ::= .if <cnd> then <op><B>, <op> ::= .while <cnd> <op> <C>, <attr> =:: .<Vvar>=<oper>, var=::.id}
i35 = { <cnd::= <opl><operador>.<opl>,<opl> ::=.true' | <opl> ::=.false' | <opl> ::=.<oper> <D>| <opl> ::=.'('<oper>')' | <opl> ::=.id | <opl> ::=.const,
              <oper>::=.(<oper>)<d1>, <oper>::=.id<d1>,<oper>::=.const<D1>}
i36_c = { <cnd>::=<oper><D>.,<opl>::=<oper><D>.}
i37 = {<cnd> ::= (<oper>.), <opl>::=(<oper>.)}
i38_c = {<op> ::= while <cnd><op>.<C>,<C> ::= .<oplaco> | <C> ::=.,<oplaco> ::= .'continue' | <oplaco> ::=.'break'}
i39_c = {<attr> ::= <var>=<oper>.}
i40_c = {<oper>::=(<oper>).<d1>,<d1>::=.<D><d1>, <d1>::=.}
i41_c = {<d1>::=<D><d1>.}
i42_c = {<d>::= +<oper>.}
i43_c = {<d>::= -<oper>.}
i44_c = {<d>::= *<oper>.}
i45_c = {<d>::= /<oper>.}
i46 = {<op> ::= if <cnd>then<op>.<B>,<B> ::= .'+' <oper> | <B> ::= .'-' <oper> | <B> ::= .'*' <oper> | <B> ::= .'/' <oper>}
i47_c = { <cnd::= <opl><operador><opl>.}
i48_c = {<cnd> ::= (<oper>)., <opl>::=<oper>).}
i49_c = {<op> ::= while <cnd><op><C>.}
i50_c = {<C> ::= <oplaco>.}
i51_c = {<oplaco> ::= continue.}
i52_c = {<oplaco ::= break.}
i53_c = {<oper> ::= (<oper>)<d1>.}
i54_c = {<op> ::= if <cnd>then<op><B>.}
i55 = {<condicao> ::= 


T(i0,begin)=i1
T(i1,<op>)=i2
T(i1,<attr>)=i3
T(i1,<var>)=i6
T(i1,if)=i4
T(i1,while)=i5
T(i1,id)=i7_c
T(i2,end) = i8_c
T(i3,<E>)=i9_c
T(i3,<a>)=i10_c
T(i3,<oper>)=i11_c
T(i3,<condicao>)=i12_c
T(i3,<laco>)=i13_c
T(i3,()=i14
T(i3,id)=i15_c
T(i3,const)= i16_c
T(i3,if)=
T(i3,while)=
 
 
 
 
 S -> begin OP end
OP -> PUTVAR A
OP -> ATTR
ATTR -> VAR = OPER
A -> CONDICAO 
A -> LACO
CONDICAO -> if CND then OP SEN
SEN -> else OP
SEN -> ''
PUTVAR -> VAR = OPER
PUTVAR -> ''       
VAR -> id
OPER -> VAR B1
OPER -> NUM B1
B1 -> B B1
B1 -> '' 
B -> + OPER
B -> - OPER
B -> * OPER
B -> / OPER
CND -> OPL C
C -> OPERADOR OPL
C -> ''
OPERADOR -> <
OPERADOR -> >
OPERADOR -> ==
OPL ->  OPER
OPL -> true
OPL -> false
LACO -> while CND OP OPLACO
NUM -> const
OPLACO -> continue
OPLACO -> break 