<S> ::= 'begin' <op> 'end'
<op>  ::= <putvar><condicao> | <putvar><laco> | <putvar><oper>
<condicao> ::= 'if' <cnd> 'then' <op><sen>
<sen> ::= 'else' <op> |
<putvar> ::= <var>'='<oper> |       
<var> ::= 'a' <var> |'e' <var> | 'i' <var> | 'o' <var> | 'u' <var> | 'a' | 'e' | 'i' | 'o' | 'u'
<oper> ::= <oper> '+' <oper> | <oper> '-' <oper> | <oper> '*' <oper> | <oper> '/' <oper> | '('<oper>')' | <var> |<num>
<cnd> ::= <opl> <operador> <opl> | <opl>
<operador> ::= '<' | '>' | '=='
<opl> ::=   <oper>| 'true' | 'false'
<laco> ::= 'while' <cnd> <op> <oplaco>
<num> ::= '1'<num> | '2' <num> | '3' <num> | '4' <num> | '5' <num> | '6' <num> | '7' <num> | '8' <num> | '9' <num> | '0' <num> | '0' | '1' | '2' | '3' |'4' | '5' |'6' | '7' | '8' | '9'
<oplaco> ::= 'continue' | 'break'|  

! Welcome to GOLD Parser Builder 5.2


"Name"    = 'noname' 
"Version" = '201'
"Author"  = 'nois' 
"About"   = 'Teste'

"Start Symbol"   = <S>

<S> ::= 'begin' <op> 'end'
<op>  ::= <putvar><A> | <attr>
<attr> ::= <var> '='<oper>
<A> ::= <condicao> | <laco>
<condicao> ::= 'if' <cnd> 'then' <op><sen>
<sen> ::= 'else' <op> |
<putvar> ::= <var>'='<oper>|       
<var> ::= id
<oper> ::=   <var><B> |<num><B>
<B>::= '+' <oper><B>| '-' <oper><B> |  '*' <oper><B> | '/' <oper><B>|
<cnd> ::= <opl><C>
<C> ::= <operador><opl>|
<operador> ::= '<' | '>' | '=='
<opl> ::=   <oper>| 'true' | 'false'
<laco> ::= 'while' <cnd> <op> <oplaco>
<num> ::= const
<oplaco> ::= 'continue' | 'break'| 



"Start Symbol"   = <S>

<S> ::= 'begin' <op> 'end'
<op>  ::= <putvar><A> | <attr>
<attr> ::= <var> '='<oper>
<A> ::= <condicao> | <laco>
<condicao> ::= 'if' <cnd> 'then' <op><sen>
<sen> ::= 'else' <op> |
<putvar> ::= <var>'='<oper> |       
<var> ::= id
<oper> ::= <var><B1> | <num><B1> | '(' <oper> ')'
<B1> ::= <B><B1> | 
<B> ::= '+' <oper> | '-' <oper> | '*' <oper> | '/' <oper>
<cnd> ::= <opl><C>
<C> ::= <operador><opl>|
<operador> ::= '<' | '>' | '=='
<opl> ::=   <oper>| 'true' | 'false'
<laco> ::= 'while' <cnd> <op> <oplaco>
<num> ::= const
<oplaco> ::= 'continue' | 'break'|

S -> begin OP end
OP -> PUTVAR A
OP -> ATTR
OP -> A
ATTR -> VAR = OPER
A -> CONDICAO
A -> LACO
CONDICAO -> if CND then OP SEN
CONDICAO -> if CND then OP
SEN -> else OP
PUTVAR -> VAR = OPER      
VAR -> id
OPER -> VAR B1
OPER -> NUM B1
OPER -> VAR
OPER -> NUM
B1 -> B B1
B -> + OPER B
B -> - OPER B 
B -> * OPER B 
B -> / OPER B
CND -> OPL C
CND -> OPL
C -> OPERADOR OPL
OPERADOR -> <
OPERADOR -> >
OPERADOR -> ==
OPL ->  OPER
OPL -> true
OPL -> false
LACO -> while CND OP OPLACO
LACO -> while CND OP
NUM -> const
OPLACO -> continue
OPLACO -> break